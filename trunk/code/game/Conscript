# game building
# builds the game for Smokin' Guns SA

# there are slight differences between Q3 and SA build:
#   -DMISSIONPACK -DSMOKINGUNS and/or -DSMOKINGUNS_SO

# qvm building against native:
# only native has g_syscalls.c
# only qvm has ../game/bg_lib.c
# qvm uses a custom g_syscalls.asm with equ stubs

Import qw( BASE_CFLAGS INSTALL_DIR NO_VM NO_SO CC CXX LINK force32bits cpu );

$OS = `uname`;
chomp($OS);

if ($OS eq 'Linux') {
  $_LDFLAGS = '-shared -ldl -lm';
}
else {
  $_LDFLAGS = '-shared -lm';
}
# Take care to build 32 bits by default when we're compiling on x86_64 systems
$_LDFLAGS .= ' -m32' if ( $force32bits );

# for SA, use -DMISSIONPACK and -DSMOKINGUNS_SO
$sa_env = new cons(
  CPPPATH => '#cgame:#game:#ui',
  CC => $CC,
  CXX => $CXX,
  LINK => $LINK,
	ENV => { PATH => $ENV{PATH}, HOME => $ENV{HOME} },
  CFLAGS => '-DMISSIONPACK -DSMOKINGUNS_SO ' . $BASE_CFLAGS . '-fPIC',
  LDFLAGS => $_LDFLAGS
);

# SA qvm building
# we heavily customize the cons environment
$vm_sa_env = new cons(
  CPPPATH => '#cgame:#game:#ui',
  CC => 'q3lcc',
  CCCOM => '%CC %CFLAGS %_IFLAGS -c %< -o %>',
  SUFOBJ => '.asm',
  LINK => 'q3asm',
  CFLAGS => '-DMISSIONPACK -DSMOKINGUNS -DQ3_VM -S -Wf-target=bytecode -Wf-g',
  # need to know where to find the compiler tools
  ENV => { PATH => $ENV{PATH} . ":../build/qvmtools", },
);

# the file with vmMain function MUST be the first one of the list
@FILES = qw(
  g_main.c
  ai_chat.c
  ai_cmd.c
  ai_dmnet.c
  ai_dmq3.c
  ai_main.c
  ai_team.c
  ai_vcmd.c
  bg_misc.c
  bg_pmove.c
  bg_slidemove.c
  g_active.c
  g_arenas.c
  g_bot.c
  g_client.c
  g_cmds.c
  g_combat.c
  g_items.c
  g_mem.c
  g_misc.c
  g_missile.c
  g_mover.c
  g_session.c
  g_spawn.c
  g_svcmds.c
  g_target.c
  g_team.c
  g_trigger.c
  g_utils.c
  g_weapon.c
  q_math.c
  q_shared.c
  g_wq_utils.c
  g_hit.c
  g_unlagged.c
  );
$FILESREF = \@FILES;

# only in .so
# (VM uses a custom .asm with equ stubs)
@SO_FILES = qw(
  g_syscalls.c
  );
$SO_FILESREF = \@SO_FILES;
  
# only for VM
@VM_FILES = qw(
  bg_lib.c
  g_syscalls.asm
  );
$VM_FILESREF = \@VM_FILES;  

if ($NO_SO eq 0)
{
	Program $sa_env "qagame$cpu.so", @$FILESREF, @$SO_FILESREF;
	Install $sa_env $INSTALL_DIR, "qagame$cpu.so";
}
if ($NO_VM eq 0)
{
	############################################################################
	# q3lcc and q3asm should be in your PATH
	############################################################################
	Depends $vm_sa_env 'qagame.qvm', '#../build/qvmtools/q3lcc';
	Depends $vm_sa_env 'qagame.qvm', '#../build/qvmtools/q3asm';
	Program $vm_sa_env 'qagame.qvm', @$FILESREF, @$VM_FILESREF;    
	Install $vm_sa_env $INSTALL_DIR . '/vm', 'qagame.qvm';
}
